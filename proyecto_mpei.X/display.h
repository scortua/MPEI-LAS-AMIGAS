// This is a guard condition so that contents of this file are not included
// more than once.  
#ifndef DISPLAY
#define	DISPLAY_H

#include <stdint.h>
#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <limits.h>
#include <string.h>

#include "p33FJ128MC802.h"
#define FCY 7372800
#include "xc.h"
#include "i2c.h"
#include <libpic30.h>

//------------------------------ Definitions ---------------------------------//
//#define OLED_RST PIN_XX  //define un pin para resetear la pantalla 
#define OLED_I2C_ADDRESS 0x78 //? 0x7A  direcci?n I2C

#if !defined SSD1306_128_32 && !defined SSD1306_96_16 && !defined SSD1306_128_64 && !defined SH1106_128_64
   #define OLED_LCDWIDTH            128
   #define OLED_LCDHEIGHT            64
#endif

#if defined SH1106_128_64
   #define OLED_LCDWIDTH            128
   #define OLED_LCDHEIGHT            64
#endif
#if defined SSD1306_128_64
   #define OLED_LCDWIDTH            128
   #define OLED_LCDHEIGHT            64
#endif
#if defined SSD1306_128_32
   #define OLED_LCDWIDTH            128
   #define OLED_LCDHEIGHT            32
#endif
#if defined SSD1306_96_16
   #define OLED_LCDWIDTH             96
   #define OLED_LCDHEIGHT            16
#endif

#define OLED_SETCONTRAST          0x81
#define OLED_DISPLAYALLON_RESUME  0xA4
#define OLED_DISPLAYALLON         0xA5
#define OLED_NORMALDISPLAY        0xA6
#define OLED_INVERTDISPLAY_       0xA7
#define OLED_DISPLAYOFF           0xAE
#define OLED_DISPLAYON            0xAF
#define OLED_SETDISPLAYOFFSET     0xD3
#define OLED_SETCOMPINS           0xDA
#define OLED_SETVCOMDETECT        0xDB
#define OLED_SETDISPLAYCLOCKDIV   0xD5
#define OLED_SETPRECHARGE         0xD9
#define OLED_SETMULTIPLEX         0xA8
#define OLED_SETLOWCOLUMN         0x00
#define OLED_SETHIGHCOLUMN        0x10
#define OLED_SETSTARTLINE         0x40
#define OLED_MEMORYMODE           0x20
#define OLED_COLUMNADDR           0x21
#define OLED_PAGEADDR             0x22
#define OLED_COMSCANINC           0xC0
#define OLED_COMSCANDEC           0xC8
#define OLED_SEGREMAP             0xA0
#define OLED_CHARGEPUMP           0x8D
#define OLED_EXTERNALVCC          0x01
#define OLED_SWITCHCAPVCC         0x02

// Scrolling #defines
#define OLED_ACTIVATE_SCROLL                      0x2F
#define OLED_DEACTIVATE_SCROLL                    0x2E
#define OLED_SET_VERTICAL_SCROLL_AREA             0xA3
#define OLED_RIGHT_HORIZONTAL_SCROLL              0x26
#define OLED_LEFT_HORIZONTAL_SCROLL               0x27
#define OLED_VERTICAL_AND_RIGHT_HORIZONTAL_SCROLL 0x29
#define OLED_VERTICAL_AND_LEFT_HORIZONTAL_SCROLL  0x2A

void OLED_command(uint8_t c);
void OLED_Begin();//inicializa la pantalla
void OLED_DrawPixel(uint8_t x, uint8_t y, bool color);//cambia de color un pixel de la pantalla
void OLED_StartScrollRight(uint8_t start, uint8_t stop);
void OLED_StartScrollLeft(uint8_t start, uint8_t stop);
void OLED_StartScrollDiagRight(uint8_t start, uint8_t stop);
void OLED_StartScrollDiagLeft(uint8_t start, uint8_t stop);
void OLED_StopScroll(void);
void OLED_Dim(bool dim);
void OLED_Display(void);//muestra los datos en pantalla
void OLED_ClearDisplay(void);//borra la pantalla
void OLED_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, bool color);//crea una linea (x,y,ancho,alto,color 1/0)
void OLED_DrawFastHLine(uint8_t x, uint8_t y, uint8_t w, bool color);//linea horizontal (x,y,diametro,color)
void OLED_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, bool color);//linea vertical (x,y,diametro,color)
void OLED_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool color);//rellena el area de un color(x,y,ancho,alto,color 1/0)
void OLED_FillScreen(bool color);//cambia de color la pantalla
void OLED_DrawCircle(int16_t x0, int16_t y0, int16_t r);//crea un circulo (x,y,radio)
void OLED_DrawCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername);//crea parte de un circulo
void OLED_FillCircle(int16_t x0, int16_t y0, int16_t r, bool color);//crea un circulo relleno de un color
void OLED_FillCircleHelper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, bool color);//crea parte de un circulo relleno de un color
void OLED_DrawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h);// crea un rectangulo (x,y,ancho,alto)
void OLED_DrawRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r);//crea un ovalo
void OLED_FillRoundRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, uint8_t r, bool color);// crea un rectangulo relleno de un color
void OLED_DrawTriangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2);//crea un triangulo
void OLED_FillTriangle(int16_t x0, int16_t y0, int16_t x1, int16_t y1, int16_t x2, int16_t y2, bool color);//crea un triangulo relleno de un color
void OLED_DrawChar(uint8_t x, uint8_t y, uint8_t c, uint8_t size);//coloca un caracter
void OLED_DrawText(uint8_t x, uint8_t y, char *_text, uint8_t size);//coloca un texto
void OLED_TextSize(uint8_t t_size);//cambia el tama?o del texto
void OLED_GotoXY(uint8_t x, uint8_t y);//posicion de inicion del texto
void OLED_Print(uint8_t c);//imprime el texto
void OLED_SetTextWrap(bool w);
void OLED_InvertDisplay(bool i);//invertir el color de la pantalla

//--------------------------------------------------------------------------//

const uint8_t Font[] = {
0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x5F, 0x00, 0x00,
0x00, 0x07, 0x00, 0x07, 0x00,
0x14, 0x7F, 0x14, 0x7F, 0x14,
0x24, 0x2A, 0x7F, 0x2A, 0x12,
0x23, 0x13, 0x08, 0x64, 0x62,
0x36, 0x49, 0x56, 0x20, 0x50,
0x00, 0x08, 0x07, 0x03, 0x00,
0x00, 0x1C, 0x22, 0x41, 0x00,
0x00, 0x41, 0x22, 0x1C, 0x00,
0x2A, 0x1C, 0x7F, 0x1C, 0x2A,
0x08, 0x08, 0x3E, 0x08, 0x08,
0x00, 0x80, 0x70, 0x30, 0x00,
0x08, 0x08, 0x08, 0x08, 0x08,
0x00, 0x00, 0x60, 0x60, 0x00,
0x20, 0x10, 0x08, 0x04, 0x02,
0x3E, 0x51, 0x49, 0x45, 0x3E,
0x00, 0x42, 0x7F, 0x40, 0x00,
0x72, 0x49, 0x49, 0x49, 0x46,
0x21, 0x41, 0x49, 0x4D, 0x33,
0x18, 0x14, 0x12, 0x7F, 0x10,
0x27, 0x45, 0x45, 0x45, 0x39,
0x3C, 0x4A, 0x49, 0x49, 0x31,
0x41, 0x21, 0x11, 0x09, 0x07,
0x36, 0x49, 0x49, 0x49, 0x36,
0x46, 0x49, 0x49, 0x29, 0x1E,
0x00, 0x00, 0x14, 0x00, 0x00,
0x00, 0x40, 0x34, 0x00, 0x00,
0x00, 0x08, 0x14, 0x22, 0x41,
0x14, 0x14, 0x14, 0x14, 0x14,
0x00, 0x41, 0x22, 0x14, 0x08,
0x02, 0x01, 0x59, 0x09, 0x06,
0x3E, 0x41, 0x5D, 0x59, 0x4E,
0x7C, 0x12, 0x11, 0x12, 0x7C,
0x7F, 0x49, 0x49, 0x49, 0x36,
0x3E, 0x41, 0x41, 0x41, 0x22,
0x7F, 0x41, 0x41, 0x41, 0x3E,
0x7F, 0x49, 0x49, 0x49, 0x41,
0x7F, 0x09, 0x09, 0x09, 0x01,
0x3E, 0x41, 0x41, 0x51, 0x73,
0x7F, 0x08, 0x08, 0x08, 0x7F,
0x00, 0x41, 0x7F, 0x41, 0x00,
0x20, 0x40, 0x41, 0x3F, 0x01,
0x7F, 0x08, 0x14, 0x22, 0x41,
0x7F, 0x40, 0x40, 0x40, 0x40,
0x7F, 0x02, 0x1C, 0x02, 0x7F,
0x7F, 0x04, 0x08, 0x10, 0x7F,
0x3E, 0x41, 0x41, 0x41, 0x3E,
0x7F, 0x09, 0x09, 0x09, 0x06,
0x3E, 0x41, 0x51, 0x21, 0x5E,
0x7F, 0x09, 0x19, 0x29, 0x46
};
const uint8_t Font2[] = {
0x26, 0x49, 0x49, 0x49, 0x32,
0x03, 0x01, 0x7F, 0x01, 0x03,
0x3F, 0x40, 0x40, 0x40, 0x3F,
0x1F, 0x20, 0x40, 0x20, 0x1F,
0x3F, 0x40, 0x38, 0x40, 0x3F,
0x63, 0x14, 0x08, 0x14, 0x63,
0x03, 0x04, 0x78, 0x04, 0x03,
0x61, 0x59, 0x49, 0x4D, 0x43,
0x00, 0x7F, 0x41, 0x41, 0x41,
0x02, 0x04, 0x08, 0x10, 0x20,
0x00, 0x41, 0x41, 0x41, 0x7F,
0x04, 0x02, 0x01, 0x02, 0x04,
0x40, 0x40, 0x40, 0x40, 0x40,
0x00, 0x03, 0x07, 0x08, 0x00,
0x20, 0x54, 0x54, 0x78, 0x40,
0x7F, 0x28, 0x44, 0x44, 0x38,
0x38, 0x44, 0x44, 0x44, 0x28,
0x38, 0x44, 0x44, 0x28, 0x7F,
0x38, 0x54, 0x54, 0x54, 0x18,
0x00, 0x08, 0x7E, 0x09, 0x02,
0x18, 0xA4, 0xA4, 0x9C, 0x78,
0x7F, 0x08, 0x04, 0x04, 0x78,
0x00, 0x44, 0x7D, 0x40, 0x00,
0x20, 0x40, 0x40, 0x3D, 0x00,
0x7F, 0x10, 0x28, 0x44, 0x00,
0x00, 0x41, 0x7F, 0x40, 0x00,
0x7C, 0x04, 0x78, 0x04, 0x78,
0x7C, 0x08, 0x04, 0x04, 0x78,
0x38, 0x44, 0x44, 0x44, 0x38,
0xFC, 0x18, 0x24, 0x24, 0x18,
0x18, 0x24, 0x24, 0x18, 0xFC,
0x7C, 0x08, 0x04, 0x04, 0x08,
0x48, 0x54, 0x54, 0x54, 0x24,
0x04, 0x04, 0x3F, 0x44, 0x24,
0x3C, 0x40, 0x40, 0x20, 0x7C,
0x1C, 0x20, 0x40, 0x20, 0x1C,
0x3C, 0x40, 0x30, 0x40, 0x3C,
0x44, 0x28, 0x10, 0x28, 0x44,
0x4C, 0x90, 0x90, 0x90, 0x7C,
0x44, 0x64, 0x54, 0x4C, 0x44,
0x00, 0x08, 0x36, 0x41, 0x00,
0x00, 0x00, 0x77, 0x00, 0x00,
0x00, 0x41, 0x36, 0x08, 0x00,
0x02, 0x01, 0x02, 0x04, 0x02
};

static uint8_t OLED_buffer[OLED_LCDHEIGHT * (OLED_LCDWIDTH / 8)];

#endif	/* XC_HEADER_TEMPLATE_H */

